import pygame
pygame.init()
surface = pygame.display.set_mode((600, 400))
green = (36, 201, 80)
soundtrack = 'epicsoundtrack.mp3'
pygame.mixer.init()
pygame.mixer.music.load(soundtrack)
pygame.mixer.music.play(-1) # If the loops is -1 then the music will repeat indefinitely.

class Game: #set whole game as class
    screen = None #screen
    invaders = [] #check to draw invaders
    rockets = [] #check to draw rockets
    lost = False #setting game over function false
    bulletspeed = -2 #initial speed of bullets generated by hero
    invaderSpeed = 0.2 #invaders initial speed
    def __init__(self, width, height): #start
        pygame.init() #intialise pygame
        self.bulletspeed = -2 #set intial bulletspeed
        self.level = 1 #set initial level
        self.width = width #screen width
        self.height = height #screen height
        self.screen = pygame.display.set_mode((width, height)) #create screen dimensions
        self.clock = pygame.time.Clock()
        done = False
        runMenu = True
        completeReset = True
        self.speed = 2
        while not done: #when games not ended
            if runMenu == True: #starting a level
                screen = None #set screen to none again
                invaders = [] #check to spawn invaders
                rockets = [] #check to spawn rockets
                lost = False #check to end game
                if completeReset: #check for level finish
                    self.speed = 2 #add powerup speed on hero to counter invaders increased speed
                    bulletspeed = -2 #add bullet speed
                    self.bulletspeed = -2 
                    completeReset = False #finish reset and start next level
                pygame.init() #start next level
                
                self.width = width #update width
                self.height = height #update height
                self.screen = pygame.display.set_mode((width, height)) #update screen size
                self.clock = pygame.time.Clock()
                done = False #make game still going
                hero = Hero(self, width / 2, height - 20) #set hero dimensions
                generator = Generator(self, self.level *0.2) #set coordiantes for bullets to spawn
                rocket = None #rockets don't spawn off start
                pressed = pygame.key.get_pressed() #create shortened key press variable
                contMenu = True #potential menu
                pygame.font.init() #create fonts
                font = pygame.font.SysFont('Arial', 50) #set system font
                while contMenu: #potential menu
                    pressed = pygame.key.get_pressed()
                    ###############INPUT MENU CODE
                    contMenu = False
                runMenu = False
            if len(self.invaders) == 0: #trigger for next level
                self.displayText("PRESS ENTER TO CONTINUE") #display text to tell user to continue
                
                pressed = pygame.key.get_pressed()
                if pressed[pygame.K_RETURN]: #start new level
                    self.level+=1 #set new level
                    if self.bulletspeed >-10: #check for bullet speed limit
                        self.bulletspeed -= 1 #add speed to bullet
                    if self.speed < 15: # check for hero speed cap

                        self.speed  +=0.8
                    runMenu = True

            pressed = pygame.key.get_pressed()
            if pressed[pygame.K_LEFT]: 
                hero.x -= self.speed if hero.x > 20 else 0
            elif pressed[pygame.K_RIGHT]:  
                hero.x += self.speed if hero.x < width - 20 else 0 

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    done = True
                if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE and not self.lost:
                    self.rockets.append(Rocket(self, hero.x, hero.y, self.bulletspeed))

            pygame.display.flip()
            self.clock.tick(60)
            self.screen.fill((0, 0, 0))

            for invader in self.invaders:
                invader.draw()
                invader.checkCollision(self)
                if (invader.y > height):
                    self.lost = True 
                    self.displayText("YOU DIED")

            for rocket in self.rockets:
                rocket.draw()


            if not self.lost: hero.draw()

    def displayText(self, text):
        pygame.font.init()
        font = pygame.font.SysFont('Arial', 30)
        textsurface = font.render(text, False, (green))
        self.screen.blit(textsurface, (90, 160))

 
class invader:
    def __init__(self, game, x, y, invaderSpeed):
        self.image = pygame.image.load('duende.png')
        self.x = x
        self.game = game
        self.y = y
        self.size = 30; self.invaderSpeed = invaderSpeed

    #self.image = pygame.image.load("invaderdude.png")
    def draw(self):
        self.game.screen.blit(self.image,(self.x, self.y))
        self.y += self.invaderSpeed




    def checkCollision(self, game):
        for rocket in game.rockets:
            if (rocket.x < self.x + self.size and
                    rocket.x > self.x - self.size and
                    rocket.y < self.y + self.size and
                    rocket.y > self.y - self.size):
                game.rockets.remove(rocket)
                game.invaders.remove(self)


class Hero:
    def __init__(self, game, x, y):
        self.image = pygame.image.load('sprite_0.png')
        self.x = x
        self.game = game
        self.y = y

    def draw(self):
        self.game.screen.blit(self.image,(self.x, self.y))


class Generator:
    def __init__(self, game, invaderSpeed):
        margin = 0
        width = 50
        for x in range(margin, game.width - margin, width):
            for y in range(margin, int(game.height / 2), width):
                game.invaders.append(invader(game, x, y, invaderSpeed))




class Rocket:
    def __init__(self, game, x, y, speed):
        self.image = pygame.image.load('bala.png')
        self.x = x
        self.y = y
        self.game = game
        self.speed = speed



    def draw(self):
        self.game.screen.blit(self.image,(self.x, self.y))  
        self.y += self.speed


if __name__ == '__main__': 
    game = Game(600, 400)